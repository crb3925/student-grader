#!/bin/bash"""\fname 	compile_test_submissions.py\author	Charles Brinsfield, crb3925@rit.edu\date	Jan 29 2022\desc	For a named directory of student's assignments, load in a configuration		file, iterate among each folder and compile the student's assignment.		Then, feed input to std::cin, capture output through std::cout, and		compare the differences in the output. Created to assist in grading		assignments for students in RIT IMGS-180"""import osimport subprocessimport sysimport difflibimport argparseimport astdef main():	description = 'Compile, run and test the submitted code within a directory'	description += ' containing directories of submissions. Iterates through each ' \				'folder, and compiles based on the submission. Can specify tests' \				'available and run through them individually.'	parser = argparse.ArgumentParser(description=description)#	help_message = 'Show messages about compilation'#	help_message += '[default is False]'#	parser.add_argument('-v', '--verbose',#						dest='verbose',#						action='store_true',#						default=False,#						help=help_message)#							requiredNamed = parser.add_argument_group('required named arguments')							help_message = 'File location to arguments and test cases .txt folder'	requiredNamed.add_argument('-r',					dest='test_file',					default=False,					help=help_message,					required=True)	parser.add_argument('path', help=help_message)		args = parser.parse_args()	path = args.path			# find and open the test file. 	# It contains the compilation line, tests and expected output.	if os.path.exists(args.test_file):		print('Loading tests')	else: 		print('Test file not located.\nPlease rerun with test file after the \'-r\' executable flag')		file = open(args.test_file, 'r')	contents = file.read()	entry_dict = ast.literal_eval(contents)	file.close()	print(entry_dict)		print(entry_dict["compilation_line"])							subdirectories = []	for entry in sorted(os.listdir(path)):		fullpath = os.path.join(path, entry)		if os.path.isdir(fullpath):			subdirectories.append(fullpath)	for subdirectory in subdirectories:		stu_name = os.path.basename(os.path.normpath(subdirectory))		#print(stu_name)		fout, ferr = '',''		compiled=False		# compile the submission, set the output to the student's name		print("Attempting to compile "+stu_name+" code... ")		compile_line = entry_dict["compilation_line"].replace('{stu_name}', stu_name)		print(compile_line)		if os.system(compile_line) == 0:			compiled=True			print('Compiled!')		else:			print ("Failed to compile, double check submission name!")		if compiled:			for i, (code_input, correct_output) in enumerate(zip(entry_dict["test_params"], entry_dict["test_output"])):				print('\n--- TESTING FOR CASE ' + str(i+1) + ' FOR \'' + stu_name + '\' ---')								proc = subprocess.Popen(['./' + stu_name + '/' + stu_name], 	stdin=subprocess.PIPE, 															stdout=subprocess.PIPE, 															stderr=subprocess.PIPE,															shell=True)				result = proc.communicate(bytes(code_input))				output = result[0].decode('utf-8')								if correct_output == output:					print('\t\tPassed case! :)')				else:					print('\tINCORRECT OUTPUT!\n \n ')					print('\n  --Submission Output--')					print(output + '\n')					print('  --Expected Output--\n' + correct_output)					print('Differences:')					for diff in difflib.context_diff(output.split('\n'), correct_output.split('\n')):						print(diff)		print('Press Enter to move to the next student (if available)')		val = raw_input()		print('\n\n\n')					return 0if __name__ == '__main__':	main()